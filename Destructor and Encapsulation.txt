# 析构函数__del__()
# 删除对象的时候，解释器会自动调用
# class Person:
#     def __init__(self):
#         print('构造函数')
#     def __del__(self):
#         print('被销毁了')
# p = Person()#实例化对象
# del p#删除p,当被执行的时候，内存会被回收，调用del函数
# print('这是最后一行代码')
# 正常运行的时候不会调用del，对象执行结束后才自动调用
# __del__()表示该程序块或者函数已执行结束
# 封装
# 面向对象的三大特性：封装、继承和多态
# 封装：隐藏对象中不希望被别人访问的属性或者方法
# 隐藏属性（私有权限），只能在类的内部使用无法通过对象访问
# 在属性名或者方法名前面加上两个下划线__
# class Person:
#     name = ('guigui')
#     __age = 18
# p = Person()
# print(p.name)
# print(Person.name)
# print(p.age)#报错，不可以访问
# 访问方法一(不规范)
# 隐藏属性实际就是把__类属性改成_类名__属性名
# p._Person__age = 3
# print(p._Person__age)
# # 方法二在类的内部使用
# class Person:
#     name = ('guigui')
#     __age = 18
#     def func(self):
#         Person.__age = 3
#         print(f'她的名字是{self.name}，她已经{self.__age}岁了')#在实例方法访问隐藏属性和类属性
# p = Person()
# p.func()
# 私有属性/方法
# 1、普通属性：xxx，如果在类中定义，在任何地方都可以使用
# 2、私有属性：_xxx单下划线开头，声明私有属性/方法，如果定义在类中，外部可以使用，子类也可以继承
# 但是在另一个py文件中通过from xxx import *导入时，无法导入
# 3、隐藏属性：__xxx，双下划线开头，如果定义在类中，外部无法访问，子类不会继承
# 要访问只能通过间接方式，在另一个py文件中无法通过from xxx import *导入
# 这种命名一般是py中的魔术属性/方法，具有特殊含义/功能，自己不能轻易定义
# class Person:
#     name = ('zz')
#     _age = 18
#     __sex = ('女')
# pe = Person()
# print(pe._age)#使用对象名._属性名调用
# print(pe._Person__sex)
# 私有方法
class Person:
    name = ('zz')
    def _play(self):#私有方法
        print(f'{Person.name}在玩手机')
    def __introduce(self):#隐藏方法
        print(f'我是{Person.name}')
    def func(self):
        print('这是平平无奇的实例方法')
        Person._play(self)#在实例方法中调用———不推荐(一定不要忘记self)
        Person.__introduce(self)
        self._play()
        self.__introduce()
pe = Person()
# pe._play()
# pe._Person__introduce()
pe.func()