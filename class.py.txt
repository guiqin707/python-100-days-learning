# 面向对象和面向过程
# 面向过程是实现一个功能的时候，注重过程，每一步都要亲力亲为
# 面向对象就是实现功能的时候，看重谁去帮我实现(偷懒)
# 类和对象(就行水果和苹果)一个抽象，一个具体

# 类的三要素
# 类名
# 属性（类的特征描述）
# 方法（功能）
# 类 = 电视机的设计图纸
# 对象 = 按照图纸生产出来的具体电视机
# 方法（类里面的函数） = 电视机具备的功能（开关、调音量、换台等）
# 定义类的的格式
# class 类名：#符合标识符规定，大驼峰命名
#       代码块
# 查看类属性：类名.属性名
# 新增类属性：类名.新增属性名 = 值
# 创建对象(实例化)
# 格式：对象名 = 类名()
# 实例化对象打印的时候，显示的是内存地址，每次的实例化的地址都不一样
# class Television:
#     height = 100
#     weight = 50
# print(Television.height)
# Television. color = 'black'
# print(Television.color)
# 创建对象(实例化)
# TV = Television()
# print(TV)#实例化对象打印的时候，显示的是内存地址，每次的实例化的地址都不一样
# 实例方法和实例属性
# 实例方法
# 实例 = 具体的对象（小明、小红）
# 方法 = 类里面定义的函数
# 实例方法 = 需要通过对象来调用的函数
# 由对象调用，至少有一个self参数，执行实例方法的时候，自动将该方法的对象赋值给self
# self = 对象自己
# 就像我们说"我"一样，对象用self来指代自己
# self.属性名 = 我这个对象的属性
# self.brand = "我这个电视的品牌"
# self.age = "我这个人的年龄"
# class Television:
#     height = 100
#     width = 50
#     def watch(self):  # self 就是调用这个方法的电视对象
#         print('我要看电视')
#         print('方法中的self', self)  # 打印出是哪个电视在说话
#
# TV = Television()
# print('TV对象本身:', TV)      # 打印TV这个电视对象
# TV.watch()
# TV2 = Television()
# TV2.watch()# TV说："我要看电视"，并展示自己是谁
# TV = Television() → 创建了一个电视对象，我们叫它"TV"
# TV.watch() → Python自动把 TV 作为参数传给 watch 方法
# 在 watch 方法内部，self 就接收到了 TV 这个对象