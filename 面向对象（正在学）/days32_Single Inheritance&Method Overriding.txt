# 继承
# 就是将两个类之间的关系转化为父子关系，子类可以继承父类的所有方法和属性
# 格式
# class 类名(父类名)：
# 代码块
# 单继承
# class person:
#     def cooking(self):
#         print('会做饭')
#     def slepp(self):
#         print('睡觉')
# class son(person):
#     pass#占位符，代码类里不写任何东西，自动跳过不会报错
# Son = son()
# Son.cooking()
# Son.slepp()
# 多重继承
# A/B/C，A继承于B，B继承于C，A也会继承C的属性和方法，传递性
# class person:
#     def cooking(self):
#         print('会做饭')
#     def slepp(self):
#         print('睡觉')
# class son(person):
#     pass#占位符，代码类里不写任何东西，自动跳过不会报错
# class grandson(son):
#     pass
# GrandSon = grandson()
# GrandSon.cooking()
# GrandSon.slepp()
# 方法的重写。是指在子类中重新定义与父类相同名称的方法
# 覆盖父类方法
class person:
    def money(self):
        print('需要继承一百万')
class son(person):
    def money(self):
        print('再找它一千万')
Son = son()
Son.money()
# 对父类方法进行拓展，继承父类的方法，子类自己也可以增加功能
# 1、父类名.方法名(self)
# 2、super().方法名()——推荐使用,其实是3的简写
# super在py中是一个特殊的类，super()是使用super类创建出来的对象，可以调用父类中的方法
# 3、super(子类名,self).方法名()
class person:
    def money(self):
        print('需要继承一百万')
class son(person):
    def money(self):
        person.money(self)# 1、父类名.方法名(self)
        super().money()# 2、super().方法名()——推荐使用
        super(son,self).money()# 3、super(子类名,self).方法名()
        print('再找它一千万')
Son = son()
Son.money()