# 多态
# 指同一种行为具有不同的表示形式（比如动物叫，但是叫的类型不同）
# 继承
# class Animal:
#     """父类名，动物的叫声"""
#     def shout(self):
#         print('我会叫')
# class Dog(Animal):
#     """子类"""
#
#     def shout(self):
#         print('小狗汪汪汪叫')
# class Cat(Animal):
#     def shout(self):
#         print('小猫喵喵叫')
# dog = Dog()
# dog.shout()
# cat = Cat()
# cat.shout()
# # 多态性：一种调用方法，不同的执行结果
# class Animal:
#     def eat(self):
#         print('我爱吃')
# class Dog(Animal):
#     def eat(self):
#         print('小狗爱吃骨头')
# class Pig(Animal):
#     def eat(self):
#         print('猪爱吃细糠')
# # 定义一个统一的接口，一个接口可以多种实现
# def test(obj):# 这个obj参数可以接收任何有eat()方法的对象
# test()函数就是一个统一的接口
# 它不需要知道传入的具体是什么动物
# 只需要知道传入的对象有eat()方法
#     obj.eat()# 调用对象的eat方法
# animal = Animal()
# dog = Dog()
# pig = Pig()
# test(dog)
# test(pig)
# test 传入不同的对象，执行不同函数的eat方法
# 静态方法
# 使用@staticmethod来进行修饰，静态方法没有self，cls参数的限制
# 静态方法与类无关，可以被转换成参数使用
class Person:
    @staticmethod
    def study(name):
        print(f'[{name}会好好学习python')
        # 静态方法可以使用类方法/对象访问
Person.study('guigui')
pe = Person()
pe.study('guigui')
# 取消不必要的参数传递，有时有利于减少不必要的内存占用和性能消耗
# 类方法
# 使用装饰器@classmethod来标识为类方法，对于类方法，第一个参数要求是类对象，一般以cls作为第一个参数
# class 类名：
#     @classmethod
#     def 方法名(cls,形参)：
#         方法体
# 类方法内部可以访问类属性，或则调用其他的类方法
class Person:
    name = 'guigui'
    @classmethod
    def sleep(cls):#cls代表类对象本身，类本质是一个对象
        print(cls)
        print('人会睡觉')
        print(cls.name)
        print(Person.name)
Person.sleep()
# 当方法中需要使用到类对象（如访问私有属性等），定义类方法
# 类方法一般配合私有属性使用
# 方法类型	装饰器	第一个参数	能访问什么	典型用途
# 实例方法	 无	      self	 实例属性、类属性	 对象的具体行为
# 类方法	  @classmethod	cls	       类属性	操作类级别的数据
# 静态方法 @staticmethod	 无	      无（只能通过参数）工具函数
