# 2.2可迭代对象iterable和迭代器iterator
# 凡是可以作用于for循环的都属于可迭代对象
# 凡是可以作用于next()都是迭代器
# from collections.abc import Iterable,Iterator
# name = 'guigui'
# print(isinstance(name,Iterable))
# print(isinstance(name,Iterator))
# print(dir(name))
# # 可迭代对象并不一定是迭代器对象
# name2 = iter(name)#将name转换为迭代器对象
# print(isinstance(name2,Iterable))
# print(isinstance(name2,Iterator))
# print(dir(name2))
# 迭代器对象一定是可迭代对象
# 总结：
# 可迭代对象可以通过iter()转换成迭代器对象
# 如果一个对象拥有__iter__(),是可迭代对象，如果一个对象拥有__next__()和__iter__(),是迭代器对象
# dir():查看对象中的属性和方法
# 2.3迭代器协议
# 对象必须提供一个next方法，执行该方法要么就返回迭代中的下一项，要么就引发StopIteration异常，来终止迭代
# 2.4自定义迭代器
# class Text(object):
#     def __init__(self):
#         self.num = 1
#     def func(self):
#         print(self.num)
#         self.num += 1
#
# te = Text()
# # te.func()
# for i in range(5):
#     te.func()
#
class Myiterable(object):
    def __init__(self):
        self.num = 0       #返回的是当前迭代器类的实例对象
    def __iter__(self):
        return self
    def __next__(self):
        if self.num == 10:
            raise StopIteration('终止迭代，数据已经被取完了')
        self.num += 1
        return self.num
mi = Myiterable()
print(mi)
print(next(mi))
for i in mi:
    print(i)